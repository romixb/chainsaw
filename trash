
//Get last handled entities before start
//lastBlock := c.getLastHandledBlock()
//lastTx := c.getLastHanledTx()

//get hash of current block
//bh, err := c.RPC.GetBlockHash(height)
//if err != nil {
//	log.Fatal(err)
//}
//
//// get the block
//b := c.RPC.GetBlockVerboseTxAsync(bh)
//block, err := b.Receive()
//if err != nil {
//	log.Fatal(err)
//}
//
////get transaction list from current block
////and get the next transaction for handling
//txs := block.Tx
//txIndex := getCurrentTx(txH, txs)
//tx := txs[txIndex]
//
////Handle i
//for i, t := range tx.Vin {
//	println(i, t.Txid)
//	//if t.
//}

// ccc:=txs[nextTx]

// ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)
// defer cancel()
// Chainsaw
// select{
// 	case <- ctx.Done
// }

// hash, err := chainhash.NewHashFromStr("98f847a51f48e93c3d750f652b93882d64e0f48aab9326b70639ef2fe2b56820")
// if err != nil {
// 	log.Fatal(err)
// }

// res := c.RPC.GetBlockVerboseTxAsync(hash)
// tx, err := res.Receive()
// if err != nil {
// 	log.Fatal(err)
// }

// res1, err := c.RPC.GetRawTransactionVerboseAsync(hash).Receive()
// if err != nil {
// 	log.Fatal(err)
// }

// fmt.Println(res1)

// js, err := json.Marshal(tx)
// if err != nil {
// 	log.Fatal(err)
// }
// fmt.Println(string(js))

//client := BlockchainClient{}
//
//blocks := client.getBlocks(time.Now())

//for _, b := range blocks {
//	fmt.Printf(b)
//}
//
//	block := client.getBlock(b.Hash)
//	nb := strings.Join(block.NextBlock, "")
//	res, err := c.Data.Exec("INSERT INTO blocks (id, hash, height, merkleroot, time, previousblock, nextblock) VALUES (?, ?, ?, ?, ?, ?, ?,)",
//		nil, block.Hash, block.Height, block.MrklRoot, block.Time, block.PrevBlock, nb)
//	if err != nil {
//		log.Fatal(err)
//	}
//	blockId, _ := res.LastInsertId()
//
//	for _, t := range block.Tx {
//
//		transaction := client.getTransaction(t.Hash)
//
//		h, err := chainhash.NewHashFromStr(t.Hash)
//		if err != nil {
//			log.Fatal(err)
//		}
//
//		r, err := c.RPC.GetRawTransactionVerboseAsync(h).Receive()
//		if err != nil {
//			log.Fatal(err)
//		}
//
//		ins := []string{}
//		for _, i := range r.Vin {
//			ins = append(ins, i.Txid)
//		}
//
//		outs := []string{}
//		for _, o := range r.Vout {
//			outs = append(outs, o.ScriptPubKey.Hex)
//		}
//
//		ctx := context.Background()
//		tx, err := c.Data.B(ctx, nil)
//		if err != nil {
//			log.Fatal(err)
//		}
//
//		_, err = tx.ExecContext(ctx, "INSERT INTO transactions (id, block_id, hash, ins, out, value, relayedBy) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
//			nil, blockId, transaction.Hash, pq.Array(ins), pq.Array(outs), nil, nil, transaction.RelayedBy)
//
//		if err != nil {
//			tx.Rollback()
//			return
//		}
//
//		err = tx.Commit()
//		if err != nil {
//			log.Fatal(err)
//		}
//
//	}
//}
//
//fmt.Println(blocks)

//Get last handled entities before start
//lastBlock := c.getLastHandledBlock()
//lastTx := c.getLastHanledTx()

//get hash of current block
//bh, err := c.RPC.GetBlockHash(height)
//if err != nil {
//	log.Fatal(err)
//}
//
//// get the block
//b := c.RPC.GetBlockVerboseTxAsync(bh)
//block, err := b.Receive()
//if err != nil {
//	log.Fatal(err)
//}
//
////get transaction list from current block
////and get the next transaction for handling
//txs := block.Tx
//txIndex := getCurrentTx(txH, txs)
//tx := txs[txIndex]
//
////Handle i
//for i, t := range tx.Vin {
//	println(i, t.Txid)
//	//if t.
//}

// ccc:=txs[nextTx]

// ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)
// defer cancel()
// Chainsaw
// select{
// 	case <- ctx.Done
// }

// hash, err := chainhash.NewHashFromStr("98f847a51f48e93c3d750f652b93882d64e0f48aab9326b70639ef2fe2b56820")
// if err != nil {
// 	log.Fatal(err)
// }

// res := c.RPC.GetBlockVerboseTxAsync(hash)
// tx, err := res.Receive()
// if err != nil {
// 	log.Fatal(err)
// }

// res1, err := c.RPC.GetRawTransactionVerboseAsync(hash).Receive()
// if err != nil {
// 	log.Fatal(err)
// }

// fmt.Println(res1)

// js, err := json.Marshal(tx)
// if err != nil {
// 	log.Fatal(err)
// }
// fmt.Println(string(js))

//client := BlockchainClient{}
//
//blocks := client.getBlocks(time.Now())

//for _, b := range blocks {
//	fmt.Printf(b)
//}
//
//	block := client.getBlock(b.Hash)
//	nb := strings.Join(block.NextBlock, "")
//	res, err := c.Data.Exec("INSERT INTO blocks (id, hash, height, merkleroot, time, previousblock, nextblock) VALUES (?, ?, ?, ?, ?, ?, ?,)",
//		nil, block.Hash, block.Height, block.MrklRoot, block.Time, block.PrevBlock, nb)
//	if err != nil {
//		log.Fatal(err)
//	}
//	blockId, _ := res.LastInsertId()
//
//	for _, t := range block.Tx {
//
//		transaction := client.getTransaction(t.Hash)
//
//		h, err := chainhash.NewHashFromStr(t.Hash)
//		if err != nil {
//			log.Fatal(err)
//		}
//
//		r, err := c.RPC.GetRawTransactionVerboseAsync(h).Receive()
//		if err != nil {
//			log.Fatal(err)
//		}
//
//		ins := []string{}
//		for _, i := range r.Vin {
//			ins = append(ins, i.Txid)
//		}
//
//		outs := []string{}
//		for _, o := range r.Vout {
//			outs = append(outs, o.ScriptPubKey.Hex)
//		}
//
//		ctx := context.Background()
//		tx, err := c.Data.B(ctx, nil)
//		if err != nil {
//			log.Fatal(err)
//		}
//
//		_, err = tx.ExecContext(ctx, "INSERT INTO transactions (id, block_id, hash, ins, out, value, relayedBy) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
//			nil, blockId, transaction.Hash, pq.Array(ins), pq.Array(outs), nil, nil, transaction.RelayedBy)
//
//		if err != nil {
//			tx.Rollback()
//			return
//		}
//
//		err = tx.Commit()
//		if err != nil {
//			log.Fatal(err)
//		}
//
//	}
//}
//
//fmt.Println(blocks)

// if b == nil {
// 	bhash, err := chainhash.NewHashFromStr(genblockhash)
// 	if err != nil {
// 		return err
// 	}

// 	rblock := c.RPC.GetBlockVerboseTxAsync(bhash)
// 	bdata, err := rblock.Receive()
// 	if err != nil {
// 		return err
// 	}

// 	b, err = c.DB.InsertBlock(ctx, bdata.Hash, bdata.Height, bdata.Time, bdata.PreviousHash, bdata.NextHash, false)
// 	if err != nil {
// 		return err
// 	}

// 	for i := 0; i < len(bdata.Tx); i++ {
// 		tx := bdata.Tx[i]
// 		log.Printf("inserting tx %s (# %d) from block %d ", tx.Txid, i, b.Height)

// 		err = c.DB.InsertTx(ctx, tx, b.ID, int32(i))
// 		if err != nil {
// 			return err
// 		}
// 	}
// } else {

// 	bhash, err := chainhash.NewHashFromStr(b.Hash)
// 	if err != nil {
// 		return err
// 	}

// 	block := c.RPC.GetBlockVerboseTxAsync(bhash)
// 	bdata, err := block.Receive()
// 	if err != nil {
// 		return err
// 	}

// 	txoffset++
// 	for i := txoffset; i < int32(len(bdata.Tx)); i++ {
// 		tx := bdata.Tx[i]
// 		err = c.DB.InsertTx(ctx, tx, b.ID, i)
// 		if err != nil {
// 			return err
// 		}
// 	}
// }